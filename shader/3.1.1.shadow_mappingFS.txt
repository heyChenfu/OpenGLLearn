#version 330 core
out vec4 FragColor;

in VS_OUT {
    vec3 FragPos;
    vec3 Normal;
    vec2 TexCoords;
    vec4 FragPosLightSpace;
} fs_in;

uniform sampler2D diffuseTexture;
uniform sampler2D shadowMap;

uniform vec3 lightPos;
uniform vec3 viewPos;

float ShadowCalculation(vec4 fragPosLightSpace)
{
    // 透视除法
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    // 为了作为从深度贴图中采样的坐标，xy分量需要变换到[0,1]。为了和深度贴图的深度相比较，z分量也需要变换到[0,1]
    // 所以整个projCoords向量都需要变换到[0,1]范围
    projCoords = projCoords * 0.5 + 0.5;
    // 使用坐标采样, 纹理坐标s,t,r,q。其中（s, t）坐标引用阴影图中的位置，第三个纹理坐标r则表示与光源的距离
    //float closestDepth = texture(shadowMap, projCoords.xy).r; 
    // 当前片元在光源视角下深度
    float currentDepth = projCoords.z;
    //使用阴影偏移处理阴影失真问题
    vec3 lightDir = normalize(lightPos - fs_in.FragPos);
    float bias = max(0.05 * 1.0 - dot(fs_in.Normal, lightDir), 0.005); //根据表面朝向光线的角度更改偏移量
    //使用PCF技术改善阴影锯齿
    float shadow = 0.0;
    vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
    for(int x = -1; x <= 1; ++x)
    {
        for(int y = -1; y <= 1; ++y)
        {
            float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r;
            // 当前片元深度是否比深度图深度要大, 确定这个片段是被光所照射还是被阴影笼罩
            shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;        
        }    
    }
    shadow /= 9.0;
    //当一个点比光的远平面还要远时，它的投影坐标的z坐标大于1.0
    if(projCoords.z > 1){
        shadow = 0.0;
    }

    return shadow;
}

void main()
{           
    vec3 color = texture(diffuseTexture, fs_in.TexCoords).rgb;
    vec3 normal = normalize(fs_in.Normal);
    vec3 lightColor = vec3(0.3);
    // ambient
    vec3 ambient = 0.3 * color;
    // diffuse
    vec3 lightDir = normalize(lightPos - fs_in.FragPos);
    float diff = max(dot(lightDir, normal), 0.0);
    vec3 diffuse = diff * lightColor;
    // specular
    vec3 viewDir = normalize(viewPos - fs_in.FragPos);
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = 0.0;
    vec3 halfwayDir = normalize(lightDir + viewDir);  
    spec = pow(max(dot(normal, halfwayDir), 0.0), 64.0);
    vec3 specular = spec * lightColor;    
    // calculate shadow
    float shadow = ShadowCalculation(fs_in.FragPosLightSpace);                      
    vec3 lighting = (ambient + (1.0 - shadow) * (diffuse + specular)) * color;    
    
    FragColor = vec4(lighting, 1.0);
}