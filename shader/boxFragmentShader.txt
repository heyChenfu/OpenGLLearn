#version 330 core
out vec4 FragColor;

struct Material {
    sampler2D diffuse;
    sampler2D specular;
    float shininess;
};

struct Light {
    vec3 position;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

in vec3 FragPos;
in vec3 Normal;
in vec2 TexCoords;

uniform Material material;
uniform Light light; //光照属性
uniform vec3 viewPos; //摄像机位置

void main()
{
	//单位法向量
	vec3 nor = normalize(Normal);
	//计算光源向量
	vec3 lightDir = normalize(light.position - FragPos);
	//计算光源和法向量夹角cos值
	float diff = max(dot(nor, lightDir), 0);

	//计算视角向量
	vec3 viewDir = normalize(viewPos - FragPos);
	//计算光源反射光向量
	vec3 reflectDir = reflect(-lightDir, nor);
	//计算镜面反射分量
	float spec = pow(max(dot(viewDir, reflectDir), 0), material.shininess); //高光的反光度

	//设置phong光照分量
	vec3 diffuse  = light.diffuse * diff * texture(material.diffuse, TexCoords).rgb; 
	vec3 ambient  = light.ambient * texture(material.diffuse, TexCoords).rgb;
	vec3 specular = light.specular * spec * texture(material.specular, TexCoords).rgb;

	//最终颜色
	vec3 result = ambient + diffuse + specular;
	FragColor = vec4(result, 1);

}