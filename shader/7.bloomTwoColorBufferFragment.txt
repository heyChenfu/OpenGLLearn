#version 330 core
//输出两个颜色缓冲
layout (location = 0) out vec4 FragColor;
layout (location = 1) out vec4 BrightColor;

in VS_OUT {
    vec3 FragPos;
    vec3 Normal;
    vec2 TexCoords;
} fs_in;

struct Light {
    vec3 Position;
    vec3 Color;
};

uniform Light lights[4];
uniform sampler2D diffuseTexture;

void main()
{
    vec3 color = texture(diffuseTexture, fs_in.TexCoords).rgb;
    vec3 lightColor = vec3(0.0);
    vec3 normal = normalize(fs_in.Normal);
    for(int i = 0; i < 4; i++)
    {
        vec3 lightDir = normalize(lights[i].Position - fs_in.FragPos);
        float diffuse = max(dot(lightDir, normal), 0.0);
        vec3 diffuseColor = lights[i].Color * diffuse * color;
        //根据距离计算
        float distance = length(lights[i].Position - fs_in.FragPos);
        diffuseColor *= 1.0 / distance;
        lightColor += diffuseColor;
    }
    FragColor = vec4(lightColor, 1.0);
    // 检查结果值是否高于某个门槛，如果高于就渲染到光源颜色缓存中
    float brightness = dot(FragColor.rgb, vec3(0.2126, 0.7152, 0.0722));
    if(brightness >= 1){
        BrightColor = FragColor;
    }
    else{
        BrightColor = vec4(0.0, 0.0, 0.0, 1.0);
    }

}